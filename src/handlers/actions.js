const redis = require("../config/redis");
const { Markup } = require("telegraf");
const fs = require("fs");

const groupFilePath = "./src/groupId.json";

const loadGroupId = () => {
  try {
    const data = fs.readFileSync(groupFilePath, "utf8");
    const { groupId } = JSON.parse(data);
    return groupId;
  } catch (err) {
    console.log(err);
    return null;
  }
};

let groupChatId = loadGroupId();

const orderInitHandler = async (ctx) => {
  try {
    const userId = ctx.from.id.toString();
    await redis.hset(`order:${userId}`, "step", 1);
    ctx.reply("–í–∫–∞–∂—ñ—Ç—å, –∫–æ–≥–æ –≤–∏ —à—É–∫–∞—î—Ç–µ?");
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—É:", error);
  }
};

const publishOrder = async (ctx) => {
  const userId = ctx.match[1];
  console.log("userId", userId);

  try {
    const order = await redis.hgetall(`order:${userId}`);

    if (order && order.step === "6") {
      const { role, peopleCount, hours, payment, location, contact } = order;

      if (role && peopleCount && hours && payment && location && contact && groupChatId) {
        await ctx.telegram.sendMessage(
          groupChatId,
          `–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n\n` +
            `üë§ –®—É–∫–∞—é: ${role}\n` +
            `üë• –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ª—é–¥–µ–π: ${peopleCount}\n` +
            `‚è≥ –ì–æ–¥–∏–Ω —Ä–æ–±–æ—Ç–∏: ${hours}\n` +
            `üíµ –û–ø–ª–∞—Ç–∞: ${payment} –≥—Ä–Ω/–≥–æ–¥\n` +
            `üìç –õ–æ–∫–∞—Ü—ñ—è: ${location}\n` +
            `üìû –ö–æ–Ω—Ç–∞–∫—Ç: ${contact}\n\n` +
            `–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É, —â–æ–± –≤—ñ–¥–≥—É–∫–Ω—É—Ç–∏—Å—å:`,
          Markup.inlineKeyboard([Markup.button.callback("–í—ñ–¥–≥—É–∫–Ω—É—Ç–∏—Å—å", `respond_${userId}`)])
        );
        ctx.editMessageText("–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ.");
      } else {
        ctx.reply("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ–ø–æ–≤–Ω–µ –∞–±–æ –≥—Ä—É–ø–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.");
      }
    } else {
      ctx.reply("–ù–µ–≤—ñ—Ä–Ω–∏–π –∫—Ä–æ–∫ –∞–±–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
    }
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:", error);
    ctx.reply("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.");
  }
};

const editOrder = async (ctx) => {
  try {
    const field = ctx.match[1];
    const userId = ctx.match[2];

    const order = await redis.hgetall(`order:${userId}`);

    if (order) {
      order.editingField = field;
      const fieldNameMap = {
        role: "–ö–æ–≥–æ —à—É–∫–∞—î—Ç–µ",
        peopleCount: "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ª—é–¥–µ–π",
        hours: "–ì–æ–¥–∏–Ω —Ä–æ–±–æ—Ç–∏",
        payment: "–û–ø–ª–∞—Ç–∞",
        location: "–õ–æ–∫–∞—Ü—ñ—è",
        contact: "–ö–æ–Ω—Ç–∞–∫—Ç",
      };

      ctx.reply(`–í–∫–∞–∂—ñ—Ç—å –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –ø–æ–ª—è: ${fieldNameMap[field] || field}`);
    } else {
      ctx.reply("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
    }
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ–ª—è:", error);
    ctx.reply("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.");
  }
};

const respondOrder = async (ctx) => {
  const customerId = ctx.match[1];
  const workerUsername = ctx.from.username;
  const workerId = ctx.update.callback_query.from.id;
  const messageId = ctx.callbackQuery.message.message_id;

  if (workerUsername) {
    try {
      await redis.hset(`order:${customerId}`, "messageId", messageId);

      await ctx.telegram.sendMessage(
        customerId,
        `–ù–∞ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–≥—É–∫–Ω—É–≤—Å—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á @${workerUsername}. –í–∏ –º–æ–∂–µ—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∞–±–æ –≤—ñ–¥—Ö–∏–ª–∏—Ç–∏ –≤—ñ–¥–≥—É–∫.`,
        Markup.inlineKeyboard([
          Markup.button.callback("‚úÖ–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", `confirm_${customerId}_${workerUsername}`),
          Markup.button.callback("‚ùå–í—ñ–¥—Ö–∏–ª–∏—Ç–∏", `reject_${customerId}_${workerUsername}`),
        ])
      );
      await ctx.telegram.sendMessage(workerId, "‚úÖ–í–∞—à –≤—ñ–¥–≥—É–∫ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞–º–æ–≤–Ω–∏–∫—É.");
    } catch (error) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–Ω–∏–∫—É:", error);
      await ctx.telegram.sendMessage(customerId, "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –≤—ñ–¥–≥—É–∫—É.");
    }
  }
};

const confirmOrder = async (ctx) => {
  const [data] = ctx.match.slice(1);
  const [userId, workerUsername] = data.split("_");

  try {
    const orderDetails = await redis.hgetall(`order:${userId}`);
    const messageId = orderDetails.messageId;

    if (!messageId || !groupChatId) {
      throw new Error("–î–∞–Ω—ñ –ø—Ä–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∞–±–æ –≥—Ä—É–ø—É –≤—ñ–¥—Å—É—Ç–Ω—ñ.");
    }

    const updatedOrderText =
      `–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n\n` +
      `${orderDetails.role ? `üë§ –®—É–∫–∞—é: ${orderDetails.role}\n` : ""}` +
      `${orderDetails.peopleCount ? `üë• –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ª—é–¥–µ–π: ${orderDetails.peopleCount}\n` : ""}` +
      `${orderDetails.hours ? `‚è≥ –ì–æ–¥–∏–Ω —Ä–æ–±–æ—Ç–∏: ${orderDetails.hours}\n` : ""}` +
      `${orderDetails.payment ? `üíµ –û–ø–ª–∞—Ç–∞: ${orderDetails.payment} –≥—Ä–Ω/–≥–æ–¥\n` : ""}` +
      `${orderDetails.location ? `üìç –õ–æ–∫–∞—Ü—ñ—è: ${orderDetails.location}\n` : ""}` +
      `${orderDetails.contact ? `üìû –ö–æ–Ω—Ç–∞–∫—Ç: ${orderDetails.contact}\n` : ""}\n` +
      `–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞–∫—Ä–∏—Ç–æ.`;

    await ctx.telegram.editMessageText(groupChatId, messageId, null, updatedOrderText);

    await ctx.editMessageText(
      `‚úÖ–í—ñ–¥–≥—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @${workerUsername} –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ. –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞–∫—Ä–∏—Ç–æ.`
    );
    await redis.del(`order:${userId}`);
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤—ñ–¥–≥—É–∫—É:", error);
    await ctx.reply("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.");
  }
};

const rejectOrder = async (ctx) => {
  const [userId, workerUsername] = data.split("_");
  try {
    ctx.editMessageText(`‚ùå–í—ñ–¥–≥—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @${workerUsername} –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.`);
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –≤—ñ–¥–≥—É–∫—É:", error);
    ctx.reply("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.");
  }
};

module.exports = {
  orderInitHandler,
  publishOrder,
  editOrder,
  respondOrder,
  confirmOrder,
  rejectOrder,
};
