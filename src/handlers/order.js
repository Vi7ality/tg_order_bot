const redis = require("../config/redis");
const { Markup } = require("telegraf");

const orderInitHandler = async (ctx) => {
  try {
    const userId = ctx.from.id.toString();
    await redis.hset(`order:${userId}`, "step", 1);
    ctx.reply("–í–∫–∞–∂—ñ—Ç—å, –∫–æ–≥–æ –≤–∏ —à—É–∫–∞—î—Ç–µ?");
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—É:", error);
  }
};

const orderCreateHandler = async (ctx) => {
  try {
    const userId = ctx.from.id.toString();
    const order = await redis.hgetall(`order:${userId}`);

    if (order) {
      const step = parseInt(order.step, 10);

      switch (step) {
        case 1:
          await redis.hset(`order:${userId}`, "role", ctx.message.text, "step", 2);
          ctx.reply("–í–∫–∞–∂—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ª—é–¥–µ–π:");
          break;

        case 2:
          if (!isNaN(ctx.message.text)) {
            await redis.hset(`order:${userId}`, "peopleCount", ctx.message.text, "step", 3);
            ctx.reply("–°–∫—ñ–ª—å–∫–∏ –≥–æ–¥–∏–Ω —Ä–æ–±–æ—Ç–∏?");
          } else {
            ctx.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è.");
          }
          break;

        case 3:
          if (!isNaN(ctx.message.text)) {
            await redis.hset(`order:${userId}`, "hours", ctx.message.text, "step", 4);
            ctx.reply("–í–∫–∞–∂—ñ—Ç—å –æ–ø–ª–∞—Ç—É (–≤—ñ–¥ 100 –≥—Ä–Ω/–≥–æ–¥):");
          } else {
            ctx.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è.");
          }
          break;

        case 4:
          await redis.hset(`order:${userId}`, "payment", ctx.message.text, "step", 5);
          ctx.reply("–í–∫–∞–∂—ñ—Ç—å –º—ñ—Å—Ü–µ —Ä–æ–±–æ—Ç–∏ (–ª–æ–∫–∞—Ü—ñ—é):");
          break;

        case 5:
          await redis.hset(`order:${userId}`, "location", ctx.message.text, "step", 6);
          ctx.reply("–í–∫–∞–∂—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∞–±–æ –Ω—ñ–∫ —É Telegram:");
          break;

        case 6:
          await redis.hset(`order:${userId}`, "contact", ctx.message.text);
          const finalOrder = await redis.hgetall(`order:${userId}`);

          ctx.reply(
            `–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –¥–µ—Ç–∞–ª—ñ –≤–∞—à–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n\n` +
              `üë§ –®—É–∫–∞—é: ${finalOrder.role}\n` +
              `üë• –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ª—é–¥–µ–π: ${finalOrder.peopleCount}\n` +
              `‚è≥ –ì–æ–¥–∏–Ω —Ä–æ–±–æ—Ç–∏: ${finalOrder.hours}\n` +
              `üíµ –û–ø–ª–∞—Ç–∞: ${finalOrder.payment} –≥—Ä–Ω/–≥–æ–¥\n` +
              `üìç –õ–æ–∫–∞—Ü—ñ—è: ${finalOrder.location}\n` +
              `üìû –ö–æ–Ω—Ç–∞–∫—Ç: ${finalOrder.contact}`,
            Markup.inlineKeyboard([
              [Markup.button.callback("‚úÖ –û–ø—Ä–∏–ª—é–¥–Ω–∏—Ç–∏", `publish_${userId}`)],
              [Markup.button.callback("‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏", `edit_${userId}`)],
            ])
          );
          break;

        default:
          ctx.reply("–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ—á–Ω—ñ—Ç—å —Å–ø–æ—á–∞—Ç–∫—É.");
          await redis.del(`order:${userId}`);
          break;
      }
    }
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—É:", error);
  }
};

const orderEditHandler = async (ctx) => {
  try {
    const userId = ctx.from.id.toString();
    const order = await redis.hgetall(`order:${userId}`);
    const action = ctx.match[0].split("_")[0]; // "edit"

    if (action === "edit" && order) {
      const step = parseInt(order.step, 10);
      switch (step) {
        case 1:
          ctx.reply("–í–∫–∞–∂—ñ—Ç—å, –∫–æ–≥–æ –≤–∏ —à—É–∫–∞—î—Ç–µ?");
          break;
        case 2:
          ctx.reply("–í–∫–∞–∂—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ª—é–¥–µ–π:");
          break;
        case 3:
          ctx.reply("–°–∫—ñ–ª—å–∫–∏ –≥–æ–¥–∏–Ω —Ä–æ–±–æ—Ç–∏?");
          break;
        case 4:
          ctx.reply("–í–∫–∞–∂—ñ—Ç—å –æ–ø–ª–∞—Ç—É (–≤—ñ–¥ 100 –≥—Ä–Ω/–≥–æ–¥):");
          break;
        case 5:
          ctx.reply("–í–∫–∞–∂—ñ—Ç—å –º—ñ—Å—Ü–µ —Ä–æ–±–æ—Ç–∏ (–ª–æ–∫–∞—Ü—ñ—é):");
          break;
        case 6:
          ctx.reply("–í–∫–∞–∂—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∞–±–æ –Ω—ñ–∫ —É Telegram:");
          break;
        default:
          ctx.reply("–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ—á–Ω—ñ—Ç—å —Å–ø–æ—á–∞—Ç–∫—É.");
          await redis.del(`order:${userId}`);
          break;
      }
    }
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É:", error);
  }
};

module.exports = {
  orderInitHandler,
  orderCreateHandler,
  orderEditHandler,
};
