const { Markup } = require("telegraf");

const orderInitHandler = async (ctx) => {
  try {
    const userId = ctx.from.id;
    userOrders[userId] = { step: 1 };
    ctx.reply("–í–∫–∞–∂—ñ—Ç—å, –∫–æ–≥–æ –≤–∏ —à—É–∫–∞—î—Ç–µ?");
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—É");
  }
};

const orderCreateHandler = async (ctx) => {
  try {
    const userId = ctx.from.id;

    if (userOrders[userId]) {
      const order = userOrders[userId];

      switch (order.step) {
        case 1:
          order.role = ctx.message.text;
          order.step++;
          ctx.reply("–í–∫–∞–∂—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ª—é–¥–µ–π:");
          break;

        case 2:
          if (!isNaN(ctx.message.text)) {
            order.peopleCount = Number(ctx.message.text);
            order.step++;
            ctx.reply("–°–∫—ñ–ª—å–∫–∏ –≥–æ–¥–∏–Ω —Ä–æ–±–æ—Ç–∏?");
          } else {
            ctx.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è.");
          }
          break;

        case 3:
          if (!isNaN(ctx.message.text)) {
            order.hours = Number(ctx.message.text);
            order.step++;
            ctx.reply("–í–∫–∞–∂—ñ—Ç—å –æ–ø–ª–∞—Ç—É (–≤—ñ–¥ 100 –≥—Ä–Ω/–≥–æ–¥):");
          } else {
            ctx.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è.");
          }
          break;

        case 4:
          order.payment = Number(ctx.message.text);
          order.step++;
          ctx.reply("–í–∫–∞–∂—ñ—Ç—å –º—ñ—Å—Ü–µ —Ä–æ–±–æ—Ç–∏ (–ª–æ–∫–∞—Ü—ñ—é):");
          break;

        case 5:
          order.location = ctx.message.text;
          order.step++;
          ctx.reply("–í–∫–∞–∂—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∞–±–æ –Ω—ñ–∫ —É Telegram:");
          break;

        case 6:
          order.contact = ctx.message.text;

          ctx.reply(
            `–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –¥–µ—Ç–∞–ª—ñ –≤–∞—à–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n\n` +
              `üë§ –®—É–∫–∞—é: ${order.role}\n` +
              `üë• –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ª—é–¥–µ–π: ${order.peopleCount}\n` +
              `‚è≥ –ì–æ–¥–∏–Ω —Ä–æ–±–æ—Ç–∏: ${order.hours}\n` +
              `üíµ –û–ø–ª–∞—Ç–∞: ${order.payment} –≥—Ä–Ω/–≥–æ–¥\n` +
              `üìç –õ–æ–∫–∞—Ü—ñ—è: ${order.location}\n` +
              `üìû –ö–æ–Ω—Ç–∞–∫—Ç: ${order.contact}`,
            Markup.inlineKeyboard([[Markup.button.callback("‚úÖ –û–ø—Ä–∏–ª—é–¥–Ω–∏—Ç–∏", `publish_${userId}`)]])
          );
          break;

        default:
          ctx.reply("–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ—á–Ω—ñ—Ç—å —Å–ø–æ—á–∞—Ç–∫—É.");
          delete userOrders[userId];
          break;
      }
    }
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—É", error);
  }
};

module.exports = { orderInitHandler, orderCreateHandler };
