const { Telegraf, Markup } = require("telegraf");
const path = require("path");
const startScript = require("./handlers");
require("dotenv").config();

const { APP_TOKEN, ADMIN_ID } = process.env;
const bot = new Telegraf(APP_TOKEN);

const userOrders = {};

bot.start((ctx) => {
  ctx.reply(
    `–ü—Ä–∏–≤—ñ—Ç, –º–µ–Ω–µ –∑–≤–∞—Ç–∏ Connect Worker Bot. –Ø –¥–æ–ø–æ–º–æ–∂—É –∑—Ä–æ–±–∏—Ç–∏ —Ç–æ–±—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.`,
    Markup.keyboard([["üìù –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"]])
      .resize()
      .oneTime()
  );
});

bot.hears("üìù –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", (ctx) => {
  const userId = ctx.from.id;
  userOrders[userId] = { step: 1 };
  ctx.reply("–í–∫–∞–∂—ñ—Ç—å, –∫–æ–≥–æ –≤–∏ —à—É–∫–∞—î—Ç–µ?");
});

bot.on("text", (ctx) => {
  const userId = ctx.from.id;

  if (userOrders[userId]) {
    const order = userOrders[userId];

    switch (order.step) {
      case 1:
        order.role = ctx.message.text;
        order.step++;
        ctx.reply("–í–∫–∞–∂—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ª—é–¥–µ–π:");
        break;

      case 2:
        if (!isNaN(ctx.message.text)) {
          order.peopleCount = Number(ctx.message.text);
          order.step++;
          ctx.reply("–°–∫—ñ–ª—å–∫–∏ –≥–æ–¥–∏–Ω —Ä–æ–±–æ—Ç–∏?");
        } else {
          ctx.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è.");
        }
        break;

      case 3:
        if (!isNaN(ctx.message.text)) {
          order.hours = Number(ctx.message.text);
          order.step++;
          ctx.reply("–í–∫–∞–∂—ñ—Ç—å –æ–ø–ª–∞—Ç—É (–≤—ñ–¥ 100 –≥—Ä–Ω/–≥–æ–¥):");
        } else {
          ctx.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è.");
        }
        break;

      case 4:
        order.payment = Number(ctx.message.text);
        order.step++;
        ctx.reply("–í–∫–∞–∂—ñ—Ç—å –º—ñ—Å—Ü–µ —Ä–æ–±–æ—Ç–∏ (–ª–æ–∫–∞—Ü—ñ—é):");
        break;

      case 5:
        order.location = ctx.message.text;
        order.step++;
        ctx.reply("–í–∫–∞–∂—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∞–±–æ –Ω—ñ–∫ —É Telegram:");
        break;

      case 6:
        order.contact = ctx.message.text;

        ctx.reply(
          `–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –¥–µ—Ç–∞–ª—ñ –≤–∞—à–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n\n` +
            `üë§ –ö–æ–≥–æ —à—É–∫–∞—î—Ç–µ: ${order.role}\n` +
            `üë• –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ª—é–¥–µ–π: ${order.peopleCount}\n` +
            `‚è≥ –ì–æ–¥–∏–Ω —Ä–æ–±–æ—Ç–∏: ${order.hours}\n` +
            `üíµ –û–ø–ª–∞—Ç–∞: ${order.payment} –≥—Ä–Ω/–≥–æ–¥\n` +
            `üìç –õ–æ–∫–∞—Ü—ñ—è: ${order.location}\n` +
            `üìû –ö–æ–Ω—Ç–∞–∫—Ç: ${order.contact}`,
          Markup.inlineKeyboard([
            Markup.button.callback("‚úÖ –û–ø—Ä–∏–ª—é–¥–Ω–∏—Ç–∏", `publish_${userId}`),
            Markup.button.callback("‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏", `edit_${userId}`),
            Markup.button.callback("‚ùå –í–∏–¥–∞–ª–∏—Ç–∏", `delete_${userId}`),
          ])
        );
        break;

      default:
        ctx.reply("–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ—á–Ω—ñ—Ç—å —Å–ø–æ—á–∞—Ç–∫—É.");
        delete userOrders[userId];
        break;
    }
  }
});

bot.action(/^publish_(\d+)$/, (ctx) => {
  const userId = ctx.match[1];
  const order = userOrders[userId];

  if (order) {
    ctx.telegram.sendMessage(
      "@your_group_chat", //  username –≥—Ä—É–ø–∏
      `–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n\n` +
        `üë§ –ö–æ–≥–æ —à—É–∫–∞—î—Ç–µ: ${order.role}\n` +
        `üë• –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ª—é–¥–µ–π: ${order.peopleCount}\n` +
        `‚è≥ –ì–æ–¥–∏–Ω —Ä–æ–±–æ—Ç–∏: ${order.hours}\n` +
        `üíµ –û–ø–ª–∞—Ç–∞: ${order.payment} –≥—Ä–Ω/–≥–æ–¥\n` +
        `üìç –õ–æ–∫–∞—Ü—ñ—è: ${order.location}\n` +
        `üìû –ö–æ–Ω—Ç–∞–∫—Ç: ${order.contact}\n\n` +
        `–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É, —â–æ–± –≤—ñ–¥–≥—É–∫–Ω—É—Ç–∏—Å—å:`,
      Markup.inlineKeyboard([Markup.button.callback("–í—ñ–¥–≥—É–∫–Ω—É—Ç–∏—Å—å", `respond_${userId}`)])
    );

    ctx.editMessageText("–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ.");
    delete userOrders[userId];
  } else {
    ctx.reply("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
  }
});

// –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–≥—É–∫—É
bot.action(/^respond_(\d+)$/, (ctx) => {
  const customerId = ctx.match[1];
  const workerUsername = ctx.from.username;

  if (workerUsername) {
    ctx.telegram.sendMessage(
      customerId,
      `–ù–∞ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–≥—É–∫–Ω—É–≤—Å—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á @${workerUsername}. –í–∏ –º–æ–∂–µ—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∞–±–æ –≤—ñ–¥—Ö–∏–ª–∏—Ç–∏ –≤—ñ–¥–≥—É–∫.`,
      Markup.inlineKeyboard([
        Markup.button.callback("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", `confirm_${workerUsername}`),
        Markup.button.callback("–í—ñ–¥—Ö–∏–ª–∏—Ç–∏", `reject_${workerUsername}`),
      ])
    );
    ctx.reply("–í–∞—à –≤—ñ–¥–≥—É–∫ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞–º–æ–≤–Ω–∏–∫—É.");
  } else {
    ctx.reply("–í–∏ –ø–æ–≤–∏–Ω–Ω—ñ –º–∞—Ç–∏ —ñ–º º—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É Telegram, —â–æ–± –≤—ñ–¥–≥—É–∫–Ω—É—Ç–∏—Å—å.");
  }
});

// –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤—ñ–¥–≥—É–∫—É
bot.action(/^confirm_(.+)$/, (ctx) => {
  const workerUsername = ctx.match[1];
  ctx.editMessageText(`–í—ñ–¥–≥—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @${workerUsername} –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ. –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞–∫—Ä–∏—Ç–æ.`);
});

// –í—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è
bot.action(/^reject_(.+)$/, (ctx) => {
  const workerUsername = ctx.match[1];
  ctx.editMessageText(`–í—ñ–¥–≥—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @${workerUsername} –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.`);
});

bot.launch();
console.log("Bot is running...");
